Override the following methods in :class:`~ssl.SSLStream` which return `None` in case the handshake is not established:

- :meth:`~ssl.SSLSocket.get_channel_binding`: https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.get_channel_binding
- :meth:`~ssl.SSLSocket.selected_alpn_protocol`: https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.selected_alpn_protocol
- :meth:`~ssl.SSLSocket.selected_npn_protocol`: https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.selected_npn_protocol

These methods raise now a `NoHandshakeError` if the handshake wasn't established. Note that they still return `None` in the cases when:

- the other party does not support ALPN/NPN.
- the `SSLContext.set_alpn_protocols()` or `SSLContext.set_npn_protocols()` was not called.

and in the case of :meth:`~ssl.SSLSocket.get_channel_binding` in the case when there is no connection.

This feature is mostly concerned about the polish and user experience of the library, and references gripes like the one in
https://github.com/python-trio/trio/issues/735.